#include <iostream>
#include <string>
#include <cmath>
#include <stdexcept>
#include "Quadtree.h"
using namespace std;

Quadtree::Quadtree() {}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

Quadtree::Quadtree(int m, double x0, double y0, double x1, double y1) 
{
    Quadtree* new_leaf_LB = nullptr;
    Quadtree* new_leaf_RB = nullptr;
    Quadtree* new_leaf_LT = nullptr;
    Quadtree* new_leaf_RT = nullptr;
    this->m = m;
    this->x0 = x0;
    this->y0 = y0;
    this->x1 = x1;
    this->y1 = y1;
    this->half_X = (x0 + x1) / 2;
    this->half_Y = (y0 + y1) / 2;
    this->counter = 0;
    this->num_subtrees = 0;
    this->hold = 0;

    point_array = new Point[m];
    for (int i = 0; i < m; i++)
    {
        point_array[i].new_x = 0;
        point_array[i].new_y = 0;
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

Quadtree::~Quadtree()
{
    // 1st check if we are a leaf
    if (this->new_leaf_LB != nullptr)
    {
        delete this->new_leaf_LB;
        delete this->new_leaf_RB;
        delete this->new_leaf_LT;
        delete this->new_leaf_RT;
        //cout << "deleted the branches from parent" << endl;
    }
    // when we are at a leaf delete the point array
    if (this->point_array != nullptr)
    {
        //cout << "deleting the point array" << endl;
        delete[] this->point_array;
        this->point_array = nullptr;
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// init function definition: 
// -------------------------  returns true or false if a valid initialization command was given
bool Quadtree::init(int x0, int y0, int x1, int y1)
{
    if ( x0 < x1 && y0 < y1 )
    {
        return true;
    }
    else 
    {
        // exception thing
        throw illegal_exception();
        return false;
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

// insert function definition: 
// -------------------------  returns true or false if a point was inserted successfully
bool Quadtree::insert(double X, double Y)
{
    if (this->new_leaf_LB != nullptr)
    {
        //cout << "x0: " << x0 << "   y0: " << y0 << "     x1: " << x1 << "        y1: " << y1 << "    m: " << m << endl;
        //cout << "X: " << X << "     Y: " << Y << "     Xhalf: " << half_X << "     Yhalf: " << half_Y << endl;

        if (X > half_X && Y > half_Y)   // add data to right-top leaf
        {
            //cout << "RT" << endl;
            return this->new_leaf_RT->insert(X, Y);
        }  
        else if (X <= half_X && Y >= half_Y)   // add data to left-top leaf
        {
            //cout << "LT" << endl;
            return this->new_leaf_LT->insert(X, Y);
        }
        else if (X > half_X && Y < half_Y)   // add data to right-bottom leaf
        {
            //cout << "RB" << endl;
            return this->new_leaf_RB->insert(X, Y);
        }
        else    // add data to left-bottom leaf
        {
            //cout << "LB" << endl;
            return this->new_leaf_LB->insert(X, Y);
        }
    }
    else
    {
        //cout << this->counter << endl;
        // traverse the tree until we find the appropriate leaf node
        // Checks for duplicate points 
        for (int i = 0; i < this->counter; i++)
        {
            if (this->point_array[i].new_x == X && this->point_array[i].new_y == Y)
            {
                //cout << "duplicate" << endl;
                return false;
            }
        }
        
        if (this->counter < m)
        {   
            //cout << "Inserting into the " << this->counter << " element in the array" << endl;
    
            //just insert into the array
            this->point_array[this->counter].new_x = X;
            this->point_array[this->counter].new_y = Y;
            //cout << "New points: " << this->point_array[this->counter].new_x << "," << this->point_array[this->counter].new_y << endl;
            this->counter++;
            return true;
        }
        else
        {
            // wen need to:
            // 1. Make the 4 new child nodes
            // 2. call insert on each of the points in the node
            // 3. delete the parent node
            this->new_leaf_LB = new Quadtree(m, x0, y0, half_X, half_Y);
            this->new_leaf_RB = new Quadtree(m, half_X, y0, x1, half_Y);
            this->new_leaf_LT = new Quadtree(m, x0, half_Y, half_X, y1);
            this->new_leaf_RT = new Quadtree(m, half_X, half_Y, x1, y1);

            for (int i = 0; i < m; i++)
            {
                this->insert(this->point_array[i].new_x, this->point_array[i].new_y);
            }
            delete[] this->point_array;
            this->point_array = nullptr;
            return this->insert(X, Y);
        }
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// search function definition
// -------------------------  returns true if there exists a point which is less than d away from (X, Y)
bool Quadtree::search(double X, double Y, double d)
{   
    hold = 0;
    if (this->new_leaf_RT != nullptr || this->new_leaf_LT != nullptr || this->new_leaf_RB != nullptr || this->new_leaf_LB != nullptr)
    {
        if (this->new_leaf_RT->search(X, Y, d) || this->new_leaf_LT->search(X, Y, d) || this->new_leaf_RB->search(X, Y, d) || this->new_leaf_LB->search(X, Y, d))
        {
            cout << "returning true" << endl;
            return true;
        }
        else
        {
            cout << "returning false" << endl;
            return false;
        }
    }
    else
    {
        for (int i = 0; i < counter; i++)
        {
            if (abs((this->point_array[i].new_x - X)) < d && abs((this->point_array[i].new_y - Y)) < d)
            {
                return true;
            }
        }
        return false;
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// nearest function definition
// -------------------------  
void Quadtree::nearest(double X, double Y, Point &nearest)
{    
    if (this->new_leaf_LB != nullptr) // if we are not at a leaf ndoe
    {
        new_leaf_LB->nearest(X, Y, nearest);
        new_leaf_RB->nearest(X, Y, nearest);
        new_leaf_LT->nearest(X, Y, nearest);
        new_leaf_RT->nearest(X, Y, nearest);
    }
    else // if we are at a leaf node
    {
        for (int i = 0; i < counter; i++)
        {
            if (abs((this->point_array[i].new_x - X)) == abs((nearest.new_x - X)) && abs((this->point_array[i].new_y - Y)) == abs((nearest.new_y - Y)))
            {
                if (this->point_array[i].new_x > nearest.new_x)
                {
                    nearest.new_x = point_array[i].new_x;
                    nearest.new_y = point_array[i].new_y;
                }
            }
            else if (abs((this->point_array[i].new_x - X)) < abs((nearest.new_x - X)) && abs((this->point_array[i].new_y - Y)) < abs((nearest.new_y - Y)))
            {
                nearest.new_x = point_array[i].new_x;
                nearest.new_y = point_array[i].new_y;
            }
        }
    }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// range function definition
// -------------------------  
bool Quadtree::range(double xr0, double yr0, double xr1, double yr1)
{
    int output_counter = 0;
    hold = 0;
    if (this->new_leaf_RT != nullptr || this->new_leaf_LT != nullptr || this->new_leaf_RB != nullptr || this->new_leaf_LB != nullptr)
    {
        if (this->new_leaf_RT->range(xr0, yr0, xr1, yr1)) {hold++;}
        if (this->new_leaf_LT->range(xr0, yr0, xr1, yr1)) {hold++;}
        if (this->new_leaf_LB->range(xr0, yr0, xr1, yr1)) {hold++;}
        if (this->new_leaf_RB->range(xr0, yr0, xr1, yr1)) {hold++;}
        
        //if (this->new_leaf_RT->range(xr0, yr0, xr1, yr1) || this->new_leaf_LT->range(xr0, yr0, xr1, yr1) || this->new_leaf_RB->range(xr0, yr0, xr1, yr1) || this->new_leaf_LB->range(xr0, yr0, xr1, yr1))
        if (hold > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    else
    {
        for (int i = 0; i < counter; i++)
        {
            if (this->point_array[i].new_x > xr0 && this->point_array[i].new_y > yr0 && this->point_array[i].new_x < xr1 && this->point_array[i].new_y < yr1)
            {
                output_counter++;
                cout << this->point_array[i].new_x << " " << this->point_array[i].new_y << " ";
            }
        }
        if (output_counter == 0)
        {
            return false;
        }
        return true;
    }  
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// is in range function definition
// -------------------------  
bool Quadtree::is_in_range(double xr0, double yr0, double xr1, double yr1)
{
    if (xr0 >= this->x0 && xr1 <= this->x1 && yr0 >= this->y0 && yr1 <= this->y1 && xr0 < xr1 && yr0 < yr1)
    {
        return true;
    }
    else 
    {
        throw illegal_exception();
        return false;
    }
}
